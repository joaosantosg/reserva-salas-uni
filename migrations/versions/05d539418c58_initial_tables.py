"""Initial tables

Revision ID: 05d539418c58
Revises: 
Create Date: 2025-03-25 16:14:58.510749

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = '05d539418c58'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('blocos',
    sa.Column('id', sa.UUID(), nullable=False, comment='ID do bloco'),
    sa.Column('nome', sa.String(length=100), nullable=False, comment='Nome do bloco'),
    sa.Column('identificacao', sa.String(length=20), nullable=False, comment='Identificação do bloco'),
    sa.Column('criado_em', sa.DateTime(), nullable=True, comment='Data de criação do bloco'),
    sa.Column('atualizado_em', sa.DateTime(), nullable=True, comment='Data de atualização do bloco'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('identificacao')
    )
    op.create_table('usuarios',
    sa.Column('id', sa.UUID(), nullable=False, comment='ID único do usuário'),
    sa.Column('nome', sa.String(length=255), nullable=False, comment='Nome completo do usuário'),
    sa.Column('email', sa.String(length=255), nullable=False, comment='Email institucional do usuário'),
    sa.Column('matricula', sa.String(length=20), nullable=False, comment='Matrícula do Coordenador'),
    sa.Column('curso', sa.String(length=255), nullable=False, comment='Curso do usuário'),
    sa.Column('senha', sa.String(length=255), nullable=False, comment='Hash da senha com bcrypt'),
    sa.Column('ativo', sa.Boolean(), nullable=False, comment='Status de ativação da conta'),
    sa.Column('bloqueado', sa.Boolean(), nullable=False, comment='Indica se a conta está bloqueada'),
    sa.Column('motivo_bloqueio', sa.String(length=255), nullable=True, comment='Motivo do bloqueio da conta'),
    sa.Column('tentativas_login', sa.Integer(), nullable=False, comment='Número de tentativas de login malsucedidas'),
    sa.Column('super_user', sa.Boolean(), nullable=False, comment='Indica se é um super usuário'),
    sa.Column('ultimo_login', sa.DateTime(timezone=True), nullable=True, comment='Data e hora do último login'),
    sa.Column('ultimo_ip', sa.String(length=45), nullable=True, comment='Último IP usado para login'),
    sa.Column('criado_em', sa.DateTime(timezone=True), nullable=False, comment='Data de criação'),
    sa.Column('atualizado_em', sa.DateTime(timezone=True), nullable=False, comment='Data da última atualização'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('email'),
    sa.UniqueConstraint('matricula')
    )
    op.create_table('salas',
    sa.Column('id', sa.UUID(), nullable=False, comment='ID da sala'),
    sa.Column('bloco_id', sa.UUID(), nullable=False, comment='ID do bloco'),
    sa.Column('identificacao_sala', sa.String(length=20), nullable=False, comment='Identificação da sala'),
    sa.Column('capacidade_maxima', sa.Integer(), nullable=False, comment='Capacidade máxima da sala'),
    sa.Column('recursos', sa.ARRAY(sa.Text()), nullable=True, comment='Recursos disponíveis na sala'),
    sa.Column('uso_restrito', sa.Boolean(), nullable=True, comment='Indica se a sala é restrita para uso'),
    sa.Column('curso_restrito', sa.String(length=100), nullable=True, comment='Curso restrito para uso da sala'),
    sa.Column('criado_em', sa.DateTime(timezone=True), nullable=False),
    sa.Column('atualizado_em', sa.DateTime(timezone=True), nullable=False),
    sa.ForeignKeyConstraint(['bloco_id'], ['blocos.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('bloco_id', 'identificacao_sala', name='uq_sala_por_bloco')
    )
    op.create_table('reservas_recorrentes',
    sa.Column('id', sa.UUID(), nullable=False, comment='ID da reserva recorrente'),
    sa.Column('sala_id', sa.UUID(), nullable=False, comment='ID da sala'),
    sa.Column('usuario_id', sa.UUID(), nullable=False, comment='ID do usuario'),
    sa.Column('motivo', sa.Text(), nullable=True, comment='Motivo da reserva recorrente'),
    sa.Column('frequencia', sa.Enum('diaria', 'semanal', 'mensal', name='frequenciaenum'), nullable=False, comment='Frequência da reserva recorrente'),
    sa.Column('dia_da_semana', sa.ARRAY(sa.Integer()), nullable=False, comment='Dia da semana'),
    sa.Column('hora_inicio', sa.Time(), nullable=False, comment='Hora de início da reserva recorrente'),
    sa.Column('hora_fim', sa.Time(), nullable=False, comment='Hora de fim da reserva recorrente'),
    sa.Column('data_inicio', sa.Date(), nullable=False, comment='Data de início da reserva recorrente'),
    sa.Column('data_fim', sa.Date(), nullable=False, comment='Data de fim da reserva recorrente'),
    sa.Column('excecoes', sa.ARRAY(sa.Date()), nullable=True, comment='Exceções da reserva recorrente'),
    sa.Column('criado_em', sa.DateTime(timezone=True), nullable=False),
    sa.Column('atualizado_em', sa.DateTime(timezone=True), nullable=False),
    sa.ForeignKeyConstraint(['sala_id'], ['salas.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['usuario_id'], ['usuarios.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('reservas',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('sala_id', sa.UUID(), nullable=False),
    sa.Column('usuario_id', sa.UUID(), nullable=False),
    sa.Column('inicio', sa.DateTime(timezone=True), nullable=False),
    sa.Column('fim', sa.DateTime(timezone=True), nullable=False),
    sa.Column('motivo', sa.Text(), nullable=True),
    sa.Column('reserva_recorrente_id', sa.UUID(), nullable=True),
    sa.Column('criado_em', sa.DateTime(timezone=True), nullable=False),
    sa.Column('atualizado_em', sa.DateTime(timezone=True), nullable=False),
    sa.CheckConstraint('inicio < fim', name='ck_reserva_periodo_valido'),
    sa.ForeignKeyConstraint(['reserva_recorrente_id'], ['reservas_recorrentes.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['sala_id'], ['salas.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['usuario_id'], ['usuarios.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('auditoria_reservas',
    sa.Column('id', sa.UUID(), nullable=False, comment='ID da auditoria'),
    sa.Column('reserva_id', sa.UUID(), nullable=True, comment='ID da reserva auditada (NULL se for reserva recorrente)'),
    sa.Column('reserva_recorrente_id', sa.UUID(), nullable=True, comment='ID da reserva recorrente auditada (NULL se for reserva simples)'),
    sa.Column('acao', sa.String(length=20), nullable=False, comment='Tipo de operação: criar, atualizar, cancelar, confirmar'),
    sa.Column('dados_anteriores', sa.JSON(), nullable=True, comment='Estado anterior da reserva em formato JSON'),
    sa.Column('dados_novos', sa.JSON(), nullable=True, comment='Novo estado da reserva em formato JSON'),
    sa.Column('usuario_id', sa.UUID(), nullable=False, comment='ID do usuário que realizou a operação'),
    sa.Column('ip_address', sa.String(length=45), nullable=True, comment='Endereço IP do usuário (suporte a IPv6)'),
    sa.Column('motivo', sa.String(length=255), nullable=True, comment='Motivo da operação (ex: cancelamento por conflito)'),
    sa.Column('criado_em', sa.DateTime(timezone=True), nullable=False, comment='Data e hora da auditoria'),
    sa.ForeignKeyConstraint(['reserva_id'], ['reservas.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['reserva_recorrente_id'], ['reservas_recorrentes.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['usuario_id'], ['usuarios.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('auditoria_reservas')
    op.drop_table('reservas')
    op.drop_table('reservas_recorrentes')
    op.drop_table('salas')
    op.drop_table('usuarios')
    op.drop_table('blocos')
    # ### end Alembic commands ###
